---
import { ModeToggle } from "@/components/ModeToggle";
import StackMarquee from "@/components/stack-marquee/StackMarquee.astro";
import { getCollection } from "astro:content";

const experiences = await getCollection("experience");
---

<div class="grid grid-cols-1 lg:grid-cols-2 gap-3 w-full mt-3">
  <div class="order-2 lg:order-1 background-card grid-boxes pt-6 lg:pt-8 px-4 lg:px-6 rounded-[2.1rem] overflow-hidden">
    <h3 class="text-foreground/60 text-xl lg:text-2xl max-w-md pb-4 lg:pb-8">Experience</h3>
    <div id="experience-container" class="relative overflow-hidden h-20 lg:h-24">
      {experiences.map((experience, index) => (
        <div
          class="experience-item absolute inset-0 flex justify-between items-start gap-2 lg:gap-4 transition-all duration-500 ease-in-out"
          data-index={index}
        >
          <div class="flex items-center gap-2">
            <img
              src={experience.data.logo}
              alt={`${experience.data.company} Logo`}
              class="w-8 h-8 lg:w-10 lg:h-10 object-contain"
            />
            <div>
              <p class="text-lg lg:text-xl font-bold">{experience.data.position}</p>
              <p class="text-xs lg:text-sm text-foreground/60">{experience.data.company}</p>
            </div>
          </div>
          <p class="text-xs lg:text-sm text-foreground/60">{experience.data.timeWorked}</p>
        </div>
      ))}
    </div>
    <div class="noise-effect"></div>
  </div>
  <div class="flex flex-col lg:flex-row gap-2 order-1 lg:order-2">
    <div class="flex-1 overflow-hidden rounded-[2.1rem] background-card p-4 lg:p-6 grid-boxes">
      <h3 class="text-foreground/60 text-xl lg:text-2xl max-w-md mb-4 lg:mb-6">Stack I use</h3>
      <StackMarquee />
      <div class="noise-effect"></div>
    </div>
    <div class="flex items-center justify-center background-card rounded-[2.1rem] grid-boxes p-4 lg:w-20">
      <ModeToggle client:load />
      <div class="noise-effect"></div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const experienceContainer = document.getElementById("experience-container");
    const experienceItems = document.querySelectorAll<HTMLElement>(".experience-item");
    let currentIndex = 0;

    let pause = false;

    // Set up initial positions
    experienceItems.forEach((item, index) => {
      item.style.transition = "opacity 0.5s, transform 1.5s";
      item.style.opacity = index === 0 ? "1" : "0";
      item.style.transform = index === 0 ? "translateY(0)" : "translateY(100%)";
      item.style.position = "absolute";
      item.style.top = "0";
      item.style.left = "0";
      item.style.width = "100%";
    });

    function transitionExperiences() {
      if (!pause) {
        const currentItem = experienceItems[currentIndex];
        const nextIndex = (currentIndex + 1) % experienceItems.length;
        const nextItem = experienceItems[nextIndex];

        if (currentItem && nextItem) {
          currentItem.style.opacity = "0";
          currentItem.style.transform = "translateY(-100%)";

          nextItem.style.transform = "translateY(100%)";
          nextItem.style.opacity = "0";

          setTimeout(() => {
            nextItem.style.opacity = "1";
            nextItem.style.transform = "translateY(0)";

            setTimeout(() => {
              currentItem.style.transform = "translateY(100%)";
            }, 500);

            currentIndex = nextIndex;
          }, 250);
        }
      }
    }

    setInterval(transitionExperiences, 2000);

    // Optional: Pause on hover
    if (experienceContainer) {
      experienceContainer.addEventListener("mouseenter", () => {
        pause = true;
      });

      experienceContainer.addEventListener("mouseleave", () => {
        pause = false;
      });
    }
  });
</script>